# 08-tool-execution

import os
import openai
from dotenv import load_dotenv
from pathlib import Path
import json

# Load environment variables from .env file
load_dotenv()

# Initialize OpenAI client with API key
openai.api_key = os.getenv("OPENAI_API_KEY")

# Define file paths
PROMPT_FILE = "prompts/system_prompt.txt"
MEMORY_FILE = "memory/interaction_log.json"
OUTPUT_FILE = "generated/Dockerfile"

def load_system_prompt():
    """
    Loads the system prompt from a file.
    Reads the content of the file specified by the `PROMPT_FILE` variable
    and returns it as a string.
    
    Returns:
        str: The content of the system prompt file.
    
    Raises:
        FileNotFoundError: If the file specified by `PROMPT_FILE` does not exist.
        IOError: If there is an error reading the file.
    """
    with open(PROMPT_FILE, "r") as f:
        return f.read()

def save_interaction(user_input, response):
    """
    Saves the interaction between the user and the system to a memory file.
    This function records the user's input and the system's response by appending
    them to a JSON file. If the file or its parent directories do not exist, they
    are created. If the file contains invalid JSON, it is ignored, and a new history
    is started.
    
    Args:
        user_input (str): The input provided by the user.
        response (str): The response generated by the system.
    
    Raises:
        OSError: If there is an issue creating directories or writing to the file.
    """
    Path(MEMORY_FILE).parent.mkdir(parents=True, exist_ok=True)
    history = []
    if os.path.exists(MEMORY_FILE):
        with open(MEMORY_FILE, "r") as f:
            try:
                history = json.load(f)
            except json.JSONDecodeError:
                pass
    history.append({"input": user_input, "output": response})
    with open(MEMORY_FILE, "w") as f:
        json.dump(history, f, indent=2)

def generate_dockerfile(prompt):
    """
    Generates a Dockerfile based on the provided prompt using an AI model.
    
    Args:
        prompt (str): The user-provided input describing the desired Dockerfile.
    
    Returns:
        str: The generated Dockerfile content as a string.
    """
    system_prompt = load_system_prompt()
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": prompt}
    ]
    response = openai.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=messages,
        temperature=0.4
    )
    return response.choices[0].message.content.strip()

def save_dockerfile(content):
    """
    Saves the provided Dockerfile content to a specified output file.
    This function ensures that the directory structure for the output file
    exists before writing the content to the file.
    
    Args:
        content (str): The content of the Dockerfile to be saved.
    
    Raises:
        OSError: If there is an issue creating directories or writing to the file.
    """
    Path(OUTPUT_FILE).parent.mkdir(parents=True, exist_ok=True)
    with open(OUTPUT_FILE, "w") as f:
        f.write(content)

if __name__ == "__main__":
    print("ðŸ§  Describe your app:")
    user_input = input("ðŸ‘‰ ")
    result = generate_dockerfile(user_input)
    print("\nðŸ“¦ Generated Dockerfile:\n")
    print(result)
    save_dockerfile(result)
    save_interaction(user_input, result)
