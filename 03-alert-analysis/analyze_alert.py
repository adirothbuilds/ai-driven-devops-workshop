# 03-alert-analysis

import os
import smtplib
from email.message import EmailMessage
from openai import OpenAI
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Initialize OpenAI client
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def read_alert(file_path: str) -> str:
    """
    Reads the content of a file and returns it as a string.
    
    Args:
        file_path (str): The path to the file to be read.
    
    Returns:
        str: The content of the file as a string.
    
    Raises:
        FileNotFoundError: If the file does not exist.
        IOError: If an I/O error occurs while reading the file.
    """
    with open(file_path, 'r', encoding='utf-8') as f:
        return f.read()

def analyze_alert(alert_text: str) -> str:
    """
    Analyzes an alert message and provides a concise summary, explanation, 
    potential cause, and suggested actions.
    
    Args:
        alert_text (str): The text of the alert to be analyzed.
    
    Returns:
        str: A professional and concise response summarizing the alert, 
        explaining the issue, identifying potential causes, and suggesting actions.
    """
    system_prompt = (
        "You are an on-call assistant. Analyze this alert and summarize its content, "
        "explain the issue, potential cause, and suggest actions. Be concise and professional."
    )
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": alert_text}
        ],
        temperature=0.4
    )
    return response.choices[0].message.content.strip()

def send_email(subject: str, body: str):
    """
    Sends an email with the specified subject and body using Gmail's SMTP server.
    This function retrieves the sender's email credentials and recipient's email 
    address from environment variables: `GMAIL_USER`, `GMAIL_PASS`, and `SEND_TO`.
    
    Args:
        subject (str): The subject line of the email.
        body (str): The body content of the email.
    
    Raises:
        KeyError: If any of the required environment variables (`GMAIL_USER`, 
                  `GMAIL_PASS`, `SEND_TO`) are not set.
        smtplib.SMTPException: If an error occurs during the SMTP connection 
                               or email sending process.
    
    Example:
        >>> send_email("Test Subject", "This is a test email body.")
    """
    email_user = os.getenv("GMAIL_USER")
    email_pass = os.getenv("GMAIL_PASS")
    recipient = os.getenv("SEND_TO")

    msg = EmailMessage()
    msg["Subject"] = subject
    msg["From"] = email_user
    msg["To"] = recipient
    msg.set_content(body)

    with smtplib.SMTP_SSL("smtp.gmail.com", 465) as smtp:
        smtp.login(email_user, email_pass)
        smtp.send_message(msg)
        print(f"📬 Email sent to {recipient}")

if __name__ == "__main__":
    """
    Entry point for the command-line interface.

    This script reads an alert message from a file, analyzes it using an LLM
    (Large Language Model), and sends a summarized explanation to a specified
    email address via Gmail SMTP.

    Usage:
        python analyze_alert.py <path_to_alert.txt>

    Example:
        python analyze_alert.py sample_alert.txt

    Requirements:
        - Environment variables must be set in a .env file:
            OPENAI_API_KEY
            GMAIL_USER
            GMAIL_PASS
            SEND_TO

        - A valid OpenAI API key and Gmail App Password must be configured.

    Raises:
        SystemExit: If the alert file path is not provided as a command-line argument.
    """
    import sys
    if len(sys.argv) < 2:
        print("❗ Usage: python analyze_alert.py <path_to_alert.txt>")
        exit(1)

    alert_path = sys.argv[1]
    raw_alert = read_alert(alert_path)
    print("🔍 Analyzing alert with GPT...\n")
    summary = analyze_alert(raw_alert)
    print("📝 Summary:\n", summary)

    subject = "🔔 Alert Summary – Generated by LLM"
    send_email(subject, summary)